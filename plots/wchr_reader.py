import glob
import h5py
import numpy

class wchr_reader:
    """
    Class to read in parallel HDF5 data generated by the WCHR Regent code
    """

    def __init__(self, filename_prefix):
        """
        Constructor of the WCHR reader class
        """

        self.filename_prefix = filename_prefix
        self.coord_files = glob.glob(filename_prefix + 'coords_*.h5')

        files = glob.glob(filename_prefix + '[0-9]*.h5')

        self.steps = steps = set([])
        self.prow  = 0
        self.pcol  = 0
        for f in files:
            step = int(f[len(filename_prefix):len(filename_prefix)+4])
            if not (step in steps):
                steps.add(step)

            st  = f[len(filename_prefix):]
            ind = st.find('px')
            row = int(st[ind+2:ind+6])
            if row > self.prow:
                self.prow = row
            ind = st.find('pz')
            col = int(st[ind+2:ind+6])
            if col > self.pcol:
                self.pcol = col

        self.prow += 1
        self.pcol += 1

        self.pencil_lo    = numpy.zeros((self.prow,self.pcol,2), dtype=int)
        self.pencil_hi    = numpy.zeros((self.prow,self.pcol,2), dtype=int)
        self.domain_size  = numpy.zeros(3, dtype=int)

        for row in range(self.prow):
            for col in range(self.pcol):
                coordfile = filename_prefix + ('coords_px%04d_pz%04d.h5' % (row, col))
                f = h5py.File(coordfile)
                sz = f['x_c'].shape
                f.close()

                if self.domain_size[1] == 0:
                    self.domain_size[1] = sz[1]

                assert(self.domain_size[1] == sz[1], "Data is invalid. Unequal domain sized in the y direction for different pencils!")

                if row != 0:
                    self.pencil_lo[row,col,1] = self.pencil_hi[row-1,col,1]
                if col != 0:
                    self.pencil_lo[row,col,0] = self.pencil_hi[row,col-1,0]

                self.pencil_hi[row,col,0] = self.pencil_lo[row,col,0] + sz[0]
                self.pencil_hi[row,col,1] = self.pencil_lo[row,col,1] + sz[2]

        self.domain_size[0] = self.pencil_hi[-1,-1,0]
        self.domain_size[2] = self.pencil_hi[-1,-1,1]

    def read_x_coord(self):
        """
        Method to read in the full domain's X coordinates
        """
        x_c = numpy.zeros((self.domain_size[0], self.domain_size[1], self.domain_size[2] ))

        for row in range(self.prow):
            for col in range(self.pcol):
                coordfile = self.filename_prefix + ('coords_px%04d_pz%04d.h5' % (row, col))
                f = h5py.File(coordfile)

                lo = self.pencil_lo[row,col]
                hi = self.pencil_hi[row,col]
                x_c[lo[0]:hi[0], :, lo[1]:hi[1]] = f['x_c'].value

                f.close()
        return x_c

    def read_y_coord(self):
        """
        Method to read in the full domain's Y coordinates
        """
        y_c = numpy.zeros((self.domain_size[0], self.domain_size[1], self.domain_size[2] ))

        for row in range(self.prow):
            for col in range(self.pcol):
                coordfile = self.filename_prefix + ('coords_px%04d_pz%04d.h5' % (row, col))
                f = h5py.File(coordfile)

                lo = self.pencil_lo[row,col]
                hi = self.pencil_hi[row,col]
                y_c[lo[0]:hi[0], :, lo[1]:hi[1]] = f['y_c'].value

                f.close()
        return y_c

    def read_z_coord(self):
        """
        Method to read in the full domain's Z coordinates
        """
        z_c = numpy.zeros((self.domain_size[0], self.domain_size[1], self.domain_size[2] ))

        for row in range(self.prow):
            for col in range(self.pcol):
                coordfile = self.filename_prefix + ('coords_px%04d_pz%04d.h5' % (row, col))
                f = h5py.File(coordfile)

                lo = self.pencil_lo[row,col]
                hi = self.pencil_hi[row,col]
                z_c[lo[0]:hi[0], :, lo[1]:hi[1]] = f['z_c'].value

                f.close()
        return z_c

    def read_variable(self, var, step):
        """
        Method to read in the full domain's data for variable var at vizdump step
        """
        v = numpy.zeros((self.domain_size[0], self.domain_size[1], self.domain_size[2] ))

        assert(step in self.steps, "Step to read in is not available in the dataset.")

        for row in range(self.prow):
            for col in range(self.pcol):
                filename = self.filename_prefix + ('%04d_px%04d_pz%04d.h5' % (step, row, col))
                f = h5py.File(filename)

                lo = self.pencil_lo[row,col]
                hi = self.pencil_hi[row,col]
                v[lo[0]:hi[0], :, lo[1]:hi[1]] = f[var].value

                f.close()
        return v

